
'use server';

import { z } from 'zod';
import { generateBlogIdeas } from '@/ai/flows/generate-blog-ideas';
import { generateBlogTitle } from '@/ai/flows/generate-blog-title';
import { generateIntelligentArticle } from '@/ai/flows/generate-intelligent-article';
import { unsplashSearch } from '@/ai/tools/unsplash-search';
import { GenerateArticleInputSchema, GenerateBlogIdeasInputSchema, GenerateBlogTitleInputSchema, type GenerateArticleInput, type GenerateBlogIdeasInput, type GenerateBlogTitleInput, type IntelligentArticle } from '@/lib/types';
import { initializedProjectId } from '@/lib/firebase/admin-config';

/**
 * Enriches a generated article with actual image URLs from Unsplash.
 * @param article The article generated by the AI, containing image hints.
 * @returns The article with `imageUrl` fields populated.
 */
async function enrichArticleWithImages(article: IntelligentArticle): Promise<IntelligentArticle> {
    const enrichedArticle = { ...article };

    // Enrich featured image
    if (enrichedArticle.featuredImageHint) {
        const searchResult = await unsplashSearch({ query: enrichedArticle.featuredImageHint });
        enrichedArticle.featuredImageUrl = searchResult.imageUrl;
    }

    // Enrich section images
    for (const section of enrichedArticle.sections) {
        if (section.imageHint) {
            const searchResult = await unsplashSearch({ query: section.imageHint });
            section.imageUrl = searchResult.imageUrl;
        }
    }

    return enrichedArticle;
}


export async function generateBlogIdeasAction(input: GenerateBlogIdeasInput) {
    try {
        const validatedInput = GenerateBlogIdeasInputSchema.parse(input);
        const result = await generateBlogIdeas(validatedInput);
        return { ideas: result.ideas };
    } catch (error) {
        console.error(error);
        return { error: 'Error al generar ideas para el blog.' };
    }
}

export async function generateBlogTitleAction(input: GenerateBlogTitleInput) {
    try {
        const validatedInput = GenerateBlogTitleInputSchema.parse(input);
        const result = await generateBlogTitle(validatedInput);
        return { title: result.title };
    } catch (error) {
        console.error(error);
        return { error: 'Error al generar el título del blog.' };
    }
}

export async function generateIntelligentArticleAction(input: GenerateArticleInput) {
    try {
        const validatedInput = GenerateArticleInputSchema.parse(input);
        
        // 1. Generate article text, image hints, AND COST from the AI
        const { article: articleWithHints, cost } = await generateIntelligentArticle(validatedInput);
        
        // 2. Enrich the article with actual image URLs using the hints
        const finalArticle = await enrichArticleWithImages(articleWithHints);
        
        // Add the cost to the final article object to be saved
        const articleWithCost = {
            ...finalArticle,
            generationCost: cost,
        };
        
        return { article: articleWithCost };

    } catch (error) {
        console.error('Error al generar el artículo:', error);
        const errorMessage = error instanceof Error ? error.message : 'Un error desconocido ocurrió.';
        return { error: `Error al generar el contenido del blog: ${errorMessage}` };
    }
}


export async function debugUnsplashSearchAction(query: string) {
    // This is a temporary copy of the unsplashSearch tool logic for debugging purposes,
    // so we don't have to re-import the main tool and can test variations.
  try {
     const accessKey = process.env.UNSPLASH_ACCESS_KEY;
    if (!accessKey) {
        throw new Error("UNSPLASH_ACCESS_KEY environment variable not set.");
    }
    const response = await fetch(`https://api.unsplash.com/search/photos?query=${encodeURIComponent(query)}&per_page=1&orientation=landscape`, {
        headers: {
            Authorization: `Client-ID ${accessKey}`,
        },
    });

    if (!response.ok) {
        throw new Error(`Failed to fetch image from Unsplash. Status: ${response.status}`);
    }

    const data = await response.json();
    const result = data.results?.[0];

    if (!result) {
      return { result: { imageUrl: `https://placehold.co/1200x600.png`, imageHint: query } };
    }
    
    const imageUrl = `${result.urls.raw}&w=1200&fit=max`;

    return { result: { imageUrl, imageHint: query } };

  } catch (error) {
    console.error('[Debug Unsplash Action] Error:', error);
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';
    return { error: errorMessage };
  }
}

export async function debugAdminInitAction(): Promise<{ status: string }> {
  try {
    // The simple act of importing this will trigger the initialization logic.
    // The `initializedProjectId` will contain the success or failure message.
    return { status: initializedProjectId };
  } catch (e: any) {
    return { status: `Caught an exception during import: ${e.message}` };
  }
}
